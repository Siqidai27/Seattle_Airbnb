library(ISLR)
attach(Wage)
library(splines)
gam1=lm(wage~ns(year,4)+ns(age,5)+education,data=Wage)
gam.m3=gam(wage~s(year,4)+s(age,5)+education,data=Wage)
library(gam)
library(gam)
gam.m3=gam(wage~s(year,4)+s(age,5)+education,data=Wage)
plot(gam.m3, se=TRUE,col="blue")
plot.gam(gam1, se=TRUE, col="red")
plot(gam.m3, se=TRUE,col="blue")
plot(gam.m3, se=TRUE,col="blue")
plot.gam(gam1, se=TRUE, col="red")
gam.m1=gam(wage~s(age,5)+education,data=Wage)
gam.m2=gam(wage~year+s(age,5)+education,data=Wage)
anova(gam.m1, gam.m2, gam.m3, test="F")
summary(gam.m3)
anova(gam.m1, gam.m2, gam.m3, test="F")
preds=predict(gam.m2, newdata=Wage)
gam.lr=gam(I(wage>250)~year+s(age,df=5)+education,family=binomial,data=Wage)
par(mfrow=c(1,3))
plot(gam.lr,se=T,col="green")
table(education,I(wage>250))
gam.lr=gam(I(wage>250)~year+s(age,df=5)+education,family=binomial,data=Wage,subset=(education!="1. < HS Grad"))
plot(gam.lr,se=T,col="green")
m1 = gam(I(wage>250)~year+education,family=binomial,data=Wage,subset=(education!="1. < HS Grad") )
m2 = gam(I(wage>250)~year+age+education,family=binomial,data=Wage, subset=(education!="1. < HS Grad") )
m3 = gam(I(wage>250)~year+s(age,2)+education,family=binomial,data=Wage, subset=(education!="1. < HS Grad") )
m4 = gam(I(wage>250)~year+s(age,5)+education,family=binomial,data=Wage, subset=(education!="1. < HS Grad") )
m5 = gam(I(wage>250)~year+s(age,8)+education,family=binomial,data=Wage, subset=(education!="1. < HS Grad") )
anova(m1, m2, m3, m4, m5, test="F")
m1 = gam(I(wage>250)~year+education,family=binomial,data=Wage,subset=(education!="1. < HS Grad") )
m2 = gam(I(wage>250)~year+age+education,family=binomial,data=Wage, subset=(education!="1. < HS Grad") )
m3 = gam(I(wage>250)~year+s(age,2)+education,family=binomial,data=Wage, subset=(education!="1. < HS Grad") )
m4 = gam(I(wage>250)~year+s(age,5)+education,family=binomial,data=Wage, subset=(education!="1. < HS Grad") )
m5 = gam(I(wage>250)~year+s(age,8)+education,family=binomial,data=Wage, subset=(education!="1. < HS Grad") )
anova(m1, m2, m3, m4, m5, test="F")
library(tree)
library(ISLR)
attach(Carseats)
High=ifelse(Sales <=8,"No","Yes")
Carseats.data =data.frame(Carseats ,High)
set.seed(2)
train=sample(1:nrow(Carseats.data), 200)
Carseats.test=Carseats.data[-train ,]
set.seed(2)
View(Carseats.data)
bagging.carseats=randomForest(High~.-Sales,data=Carseats.data,subset=train,mtry=10,ntree = 10,importance=TRUE)
library("randomForest", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
set.seed(2)
bagging.carseats=randomForest(High~.-Sales,data=Carseats.data,subset=train,mtry=10,ntree = 10,importance=TRUE)
set.seed(2)
hw.pred=predict(bagging.carseats,Carseats.test,type="class")
High.test=High[-train]
set.seed(2)
table(hw.pred ,High.test)
importance(bagging.carseats)
set.seed(2)
bagging.carseats.2=randomForest(High~.-Sales,data=Carseats.data,subset=train,mtry=10,ntree = 500,importance=TRUE)
set.seed(2)
hw.pred.2=predict(bagging.carseats.2,Carseats.test,type="class")
set.seed(2)
table(hw.pred.2 ,High.test)
set.seed(2)
bagging.carseats.3=randomForest(High~.-Sales,data=Carseats.data,subset=train,mtry=3,ntree = 500,importance=TRUE)
set.seed(2)
hw.pred.3=predict(bagging.carseats.3,Carseats.test,type="class")
set.seed(2)
table(hw.pred.3 ,High.test)
library(randomForest)
library(MASS)
set.seed (1)
train = sample(1:nrow(Boston),nrow(Boston)/2)
bag.boston = randomForest(medv~.,data=Boston,subset=train,mtry=13, importance=TRUE)
set.seed (1)
yhat.bag = predict(bag.boston ,newdata=Boston[-train ,])
boston.test = Boston[-train,"medv"]
plot(yhat.bag, boston.test)
abline (0 ,1)
mean((yhat.bag-boston.test)^2)
set.seed (1)
bag.boston=randomForest(medv~.,data=Boston,subset=train, mtry=13,ntree=25)
yhat.bag = predict(bag.boston ,newdata=Boston[-train ,])
mean((yhat.bag-boston.test)^2)
set.seed (1)
rf.boston=randomForest(medv~.,data=Boston,subset=train,mtry=6, importance=TRUE)
yhat.rf = predict(rf.boston,newdata=Boston[-train ,])
mean((yhat.rf-boston.test)^2)
listings = read.csv("data/listings.csv", header = TRUE)
listings[c("thumbnail_url", "medium_url", "picture_url", "xl_picture_url",
"host_url", "host_thumbnail_url", "host_picture_url", "host_neighbourhood",
"listing_url", "experiences_offered", "id", "scrape_id", "last_scraped", "name", "host_id",
"host_name", "host_since", "host_location", "host_acceptance_rate", "host_verifications",
"host_has_profile_pic", "host_identity_verified", "street", "neighbourhood",
"city", "state", "market", "zipcode", "smart_location", "country_code", "country",
"is_location_exact", "square_feet", "weekly_price", "monthly_price", "maximum_nights",
"calendar_updated", "has_availability", "calendar_last_scraped", "first_review", "last_review",
"requires_license", "jurisdiction_names", "license", "neighbourhood_cleansed")] = NULL
listings$security_deposit = as.numeric(gsub("[\\$,]", "", listings$security_deposit))
listings$price = as.numeric(gsub("[\\$,]", "", listings$price))
listings$cleaning_fee = as.numeric(gsub("[\\$,]", "", listings$cleaning_fee))
listings$extra_people = as.numeric(gsub("[\\$,]", "", listings$extra_people))
setwd("~/Documents/Cornell/Courses/ORIE4740_DataMining/Seattle_Airbnb")
new_listings = read.csv("listings_cleansed.csv", header = TRUE)
new_listings = read.csv("listings_cleansed.csv", header = TRUE)
data.selected = read.csv("data/listings_selected.csv", header = TRUE)
set.seed(2)
train_i <- sample(1:nrow(data.selected), 2/3*nrow(data.selected))
listings.train.new <- data.selected[train_i, ]
listings.test.new <- data.selected[-train_i, ]
listingsLM.new = lm( formula = price ~ ., data = listings.train.new )
summary(listingsLM.new)
listings = read.csv("data/listings.csv", header = TRUE)
listings[c("thumbnail_url", "medium_url", "picture_url", "xl_picture_url",
"host_url", "host_thumbnail_url", "host_picture_url", "host_neighbourhood",
"listing_url", "experiences_offered", "id", "scrape_id", "last_scraped", "name", "host_id",
"host_name", "host_since", "host_location", "host_acceptance_rate", "host_verifications",
"host_has_profile_pic", "host_identity_verified", "street", "neighbourhood",
"city", "state", "market", "zipcode", "smart_location", "country_code", "country",
"is_location_exact", "square_feet", "weekly_price", "monthly_price", "maximum_nights",
"calendar_updated", "has_availability", "calendar_last_scraped", "first_review", "last_review",
"requires_license", "jurisdiction_names", "license", "neighbourhood_cleansed")] = NULL
listings$security_deposit = as.numeric(gsub("[\\$,]", "", listings$security_deposit))
listings$price = as.numeric(gsub("[\\$,]", "", listings$price))
listings$cleaning_fee = as.numeric(gsub("[\\$,]", "", listings$cleaning_fee))
listings$extra_people = as.numeric(gsub("[\\$,]", "", listings$extra_people))
listings$host_response_rate = as.numeric(gsub("[,\\%]", "", listings$host_response_rate))
listings$security_deposit[is.na(listings$security_deposit)] = 0
listings$cleaning_fee[is.na(listings$cleaning_fee)] = 0
listings$reviews_per_month[is.na(listings$reviews_per_month)] = 0
listings$bathrooms[is.na(listings$bathrooms)] = 0
listings$bedrooms[is.na(listings$bedrooms)] = 0
listings$beds[is.na(listings$beds)] = 0
listings$review_scores_rating[is.na(listings$review_scores_rating)] = mean(listings$review_scores_rating, na.rm = TRUE)
listings$review_scores_accuracy[is.na(listings$review_scores_accuracy)] = mean(listings$review_scores_accuracy, na.rm = TRUE)
listings$review_scores_cleanliness[is.na(listings$review_scores_cleanliness)] = mean(listings$review_scores_cleanliness, na.rm = TRUE)
listings$review_scores_checkin[is.na(listings$review_scores_checkin)] = mean(listings$review_scores_checkin, na.rm = TRUE)
listings$review_scores_communication[is.na(listings$review_scores_communication)] = mean(listings$review_scores_communication, na.rm = TRUE)
listings$review_scores_location[is.na(listings$review_scores_location)] = mean(listings$review_scores_location, na.rm = TRUE)
listings$review_scores_value[is.na(listings$review_scores_value)] = mean(listings$review_scores_value, na.rm = TRUE)
listings$host_response_rate[is.na(listings$host_response_rate)] = mean(listings$host_response_rate, na.rm = TRUE)
listings$count_summary = sapply(gregexpr("[[:alpha:]]+", listings$summary), function(x) sum(x > 0))
listings$count_summary = listings$count_summary + sapply(gregexpr("[[:digit:]]+\\.*[[:digit:]]*", listings$summary), function(x) sum(x > 0))
listings$count_description = sapply(gregexpr("[[:alpha:]]+", listings$description), function(x) sum(x > 0))
listings$count_description = listings$count_description + sapply(gregexpr("[[:digit:]]+\\.*[[:digit:]]*", listings$description), function(x) sum(x > 0))
listings$count_space = sapply(gregexpr("[[:alpha:]]+", listings$space), function(x) sum(x > 0))
listings$count_space = listings$count_space + sapply(gregexpr("[[:digit:]]+\\.*[[:digit:]]*", listings$space), function(x) sum(x > 0))
listings$count_neighborhood = sapply(gregexpr("[[:alpha:]]+", listings$neighborhood_overview), function(x) sum(x > 0))
listings$count_neighborhood = listings$count_neighborhood + sapply(gregexpr("[[:digit:]]+\\.*[[:digit:]]*", listings$neighborhood_overview), function(x) sum(x > 0))
listings$count_notes = sapply(gregexpr("[[:alpha:]]+", listings$notes), function(x) sum(x > 0))
listings$count_notes = listings$count_notes + sapply(gregexpr("[[:digit:]]+\\.*[[:digit:]]*", listings$notes), function(x) sum(x > 0))
listings$count_transit = sapply(gregexpr("[[:alpha:]]+", listings$transit), function(x) sum(x > 0))
listings$count_transit = listings$count_transit + sapply(gregexpr("[[:digit:]]+\\.*[[:digit:]]*", listings$transit), function(x) sum(x > 0))
listings$count_host = sapply(gregexpr("[[:alpha:]]+", listings$host_about), function(x) sum(x > 0))
listings$count_host = listings$count_host + sapply(gregexpr("[[:digit:]]+\\.*[[:digit:]]*", listings$host_about), function(x) sum(x > 0))
listings$count_amenities = sapply(gregexpr("[^,\\s][^\\,]*[^,\\s]*", listings$amenities), function(x) sum(x > 0))
listings$count_amenities[which(listings$amenities == "{}")] = 0
listings$count_notes[which(is.na(listings$notes))] = 0
listings$count_total = listings$count_summary + listings$count_description + listings$count_space +
listings$count_neighborhood + listings$count_notes + listings$count_transit + listings$count_host
listings[c("summary", "description", "space", "amenities", "neighborhood_overview",
"notes", "transit", "host_about")] = NULL
unique (unlist(lapply (listings, function (x) which (is.na (x)))))
new_listings = listings
new_listings[c("count_notes","count_description","count_space","count_transit",
"count_host","count_neighborhood","host_listings_count"
,"count_summary","count_amenities")] = NULL
sapply(new_listings,class)
new_listings = read.csv("listings_cleansed.csv", header = TRUE)
data.lm = new_listings
set.seed(2)
train_ind <- sample(1:nrow(data.lm), 2/3*nrow(data.lm))
listings.train <- data.lm[train_ind, ]
listings.test <- data.lm[-train_ind, ]
listings = read.csv("data/listings.csv", header = TRUE)
listings[c("thumbnail_url", "medium_url", "picture_url", "xl_picture_url",
"host_url", "host_thumbnail_url", "host_picture_url", "host_neighbourhood",
"listing_url", "experiences_offered", "id", "scrape_id", "last_scraped", "name", "host_id",
"host_name", "host_since", "host_location", "host_acceptance_rate", "host_verifications",
"host_has_profile_pic", "host_identity_verified", "street", "neighbourhood",
"city", "state", "market", "zipcode", "smart_location", "country_code", "country",
"is_location_exact", "square_feet", "weekly_price", "monthly_price", "maximum_nights",
"calendar_updated", "has_availability", "calendar_last_scraped", "first_review", "last_review",
"requires_license", "jurisdiction_names", "license", "neighbourhood_cleansed")] = NULL
listings$security_deposit = as.numeric(gsub("[\\$,]", "", listings$security_deposit))
listings$price = as.numeric(gsub("[\\$,]", "", listings$price))
listings$cleaning_fee = as.numeric(gsub("[\\$,]", "", listings$cleaning_fee))
listings$extra_people = as.numeric(gsub("[\\$,]", "", listings$extra_people))
listings$host_response_rate = as.numeric(gsub("[,\\%]", "", listings$host_response_rate))
listings$security_deposit[is.na(listings$security_deposit)] = 0
listings$reviews_per_month[is.na(listings$reviews_per_month)] = 0
listings$bedrooms[is.na(listings$bedrooms)] = 0
listings$cleaning_fee[is.na(listings$cleaning_fee)] = 0
listings$review_scores_accuracy[is.na(listings$review_scores_accuracy)] = mean(listings$review_scores_accuracy, na.rm = TRUE)
listings$review_scores_cleanliness[is.na(listings$review_scores_cleanliness)] = mean(listings$review_scores_cleanliness, na.rm = TRUE)
listings$review_scores_rating[is.na(listings$review_scores_rating)] = mean(listings$review_scores_rating, na.rm = TRUE)
listings$beds[is.na(listings$beds)] = 0
listings$bathrooms[is.na(listings$bathrooms)] = 0
listings$review_scores_checkin[is.na(listings$review_scores_checkin)] = mean(listings$review_scores_checkin, na.rm = TRUE)
listings$review_scores_communication[is.na(listings$review_scores_communication)] = mean(listings$review_scores_communication, na.rm = TRUE)
listings$review_scores_value[is.na(listings$review_scores_value)] = mean(listings$review_scores_value, na.rm = TRUE)
listings$review_scores_location[is.na(listings$review_scores_location)] = mean(listings$review_scores_location, na.rm = TRUE)
listings$host_response_rate[is.na(listings$host_response_rate)] = mean(listings$host_response_rate, na.rm = TRUE)
listings$count_summary = sapply(gregexpr("[[:alpha:]]+", listings$summary), function(x) sum(x > 0))
listings$count_summary = listings$count_summary + sapply(gregexpr("[[:digit:]]+\\.*[[:digit:]]*", listings$summary), function(x) sum(x > 0))
listings$count_description = sapply(gregexpr("[[:alpha:]]+", listings$description), function(x) sum(x > 0))
listings$count_description = listings$count_description + sapply(gregexpr("[[:digit:]]+\\.*[[:digit:]]*", listings$description), function(x) sum(x > 0))
listings$count_space = sapply(gregexpr("[[:alpha:]]+", listings$space), function(x) sum(x > 0))
listings$count_space = listings$count_space + sapply(gregexpr("[[:digit:]]+\\.*[[:digit:]]*", listings$space), function(x) sum(x > 0))
listings$count_neighborhood = sapply(gregexpr("[[:alpha:]]+", listings$neighborhood_overview), function(x) sum(x > 0))
listings$count_neighborhood = listings$count_neighborhood + sapply(gregexpr("[[:digit:]]+\\.*[[:digit:]]*", listings$neighborhood_overview), function(x) sum(x > 0))
listings$count_notes = sapply(gregexpr("[[:alpha:]]+", listings$notes), function(x) sum(x > 0))
listings$count_notes = listings$count_notes + sapply(gregexpr("[[:digit:]]+\\.*[[:digit:]]*", listings$notes), function(x) sum(x > 0))
listings$count_transit = sapply(gregexpr("[[:alpha:]]+", listings$transit), function(x) sum(x > 0))
listings$count_host = sapply(gregexpr("[[:alpha:]]+", listings$host_about), function(x) sum(x > 0))
listings$count_host = listings$count_host + sapply(gregexpr("[[:digit:]]+\\.*[[:digit:]]*", listings$host_about), function(x) sum(x > 0))
listings$count_transit = listings$count_transit + sapply(gregexpr("[[:digit:]]+\\.*[[:digit:]]*", listings$transit), function(x) sum(x > 0))
listings$count_amenities = sapply(gregexpr("[^,\\s][^\\,]*[^,\\s]*", listings$amenities), function(x) sum(x > 0))
listings$count_notes[which(is.na(listings$notes))] = 0
listings$count_amenities[which(listings$amenities == "{}")] = 0
listings$count_total = listings$count_summary + listings$count_description + listings$count_space +
listings$count_neighborhood + listings$count_notes + listings$count_transit + listings$count_host
listings[c("summary", "description", "space", "amenities", "neighborhood_overview",
"notes", "transit", "host_about")] = NULL
unique (unlist(lapply (listings, function (x) which (is.na (x)))))
new_listings = listings
new_listings[c("count_notes","count_description","count_space","count_transit",
"count_host","count_neighborhood","host_listings_count"
,"count_summary","count_amenities")] = NULL
sapply(new_listings,class)
data.lm = new_listings
set.seed(2)
train_ind <- sample(1:nrow(data.lm), 2/3*nrow(data.lm))
listings.train <- data.lm[train_ind, ]
listings.test <- data.lm[-train_ind, ]
listingsLM = lm( formula = price ~ ., data = listings.train )
summary(listingsLM)
library(leaps)
regfit.bwd=regsubsets(price~.,data = data.lm, nvmax = 39, method = "backward")
plot(regfit.bwd,scale="bic")
par(mar=c(10,10,2,1))
plot(regfit.bwd,scale="bic")
par(mar=c(10,10,10,1))
plot(regfit.bwd,scale="bic")
par(mar=c(1,1,1,1))
plot(regfit.bwd,scale="bic")
?plot
plot(regfit.bwd,scale="adjr2")
coef(regfit.bwd ,7)
coef(regfit.bwd ,34)
data.selected = read.csv("data/listings_selected.csv", header = TRUE)
set.seed(2)
train_i <- sample(1:nrow(data.selected), 2/3*nrow(data.selected))
listings.train.new <- data.selected[train_i, ]
listings.test.new <- data.selected[-train_i, ]
listingsLM.new = lm( formula = price ~ ., data = listings.train.new )
summary(listingsLM.new)
data.selected = read.csv("data/listings_selected.csv", header = TRUE)
set.seed(2)
train_i <- sample(1:nrow(data.selected), 2/3*nrow(data.selected))
listings.train.new <- data.selected[train_i, ]
listings.test.new <- data.selected[-train_i, ]
listingsLM.new = lm( formula = price ~ ., data = listings.train.new )
summary(listingsLM.new)
write.csv(data.lm, file = "listings_selected.csv",row.names=FALSE)
write.csv(data.lm, file = "listings_selected.csv",row.names=FALSE)
data.selected = read.csv("listings_selected.csv", header = TRUE)
set.seed(2)
train_i <- sample(1:nrow(data.selected), 2/3*nrow(data.selected))
listings.train.new <- data.selected[train_i, ]
listings.test.new <- data.selected[-train_i, ]
listingsLM.new = lm( formula = price ~ ., data = listings.train.new )
summary(listingsLM.new)
data.selected = read.csv("listings_selected.csv", header = TRUE)
set.seed(2)
train_i <- sample(1:nrow(data.selected), 2/3*nrow(data.selected))
listings.train.new <- data.selected[train_i, ]
listings.test.new <- data.selected[-train_i, ]
listingsLM.new = lm( formula = price ~ ., data = listings.train.new )
summary(listingsLM.new)
listingsLM.new = lm( formula = price ~ ., data = listings.train.new )
summary(listingsLM.new)
data.selected = read.csv("listings_selected.csv", header = TRUE)
set.seed(2)
train_i <- sample(1:nrow(data.selected), 2/3*nrow(data.selected))
listings.train.new <- data.selected[train_i, ]
listings.test.new <- data.selected[-train_i, ]
listingsLM.new = lm( formula = price ~ ., data = listings.train.new )
summary(listingsLM.new)
data.selected = read.csv("listings_selected.csv", header = TRUE)
set.seed(2)
train_i <- sample(1:nrow(data.selected), 2/3*nrow(data.selected))
listings.train.new <- data.selected[train_i, ]
listings.test.new <- data.selected[-train_i, ]
listingsLM.new = lm( formula = price ~ ., data = listings.train.new )
summary(listingsLM.new)
plot(predict(listingsLM.new), residuals(listingsLM.new))
regfit.bwd=regsubsets(price~.,data = data.lm, nvmax = 34, method = "backward")
reg.summary=summary(regfit.bwd)
plot(reg.summary$bic ,xlab="Number of Variables ",ylab="BIC",
type='l')
which.min(reg.summary$bic)
listingsLM.new = lm( formula = price ~ . +poly(guests_included ,3)
+sqrt(cleaning_fee)+ log(bedrooms+1)
+poly(bathrooms,3)+poly(accommodates,5),
data = listings.train.new )
summary(listingsLM.new)
plot(predict(listingsLM.new), residuals(listingsLM.new))
lev = hat(model.matrix(listingsLM.new))
plot(lev)
listings.train.new<-listings.train.new[lev <0.6,]
listingsLM.new = lm( formula = price ~ . +poly(guests_included ,3)
+sqrt(cleaning_fee)+ log(bedrooms+1)
+poly(bathrooms,3)+poly(accommodates,5),
data = listings.train.new )
summary(listingsLM.new)
pred <- predict(listingsLM.new,data.selected[-train_i, ],type = 'response')
data.selected = read.csv("data/listings_selected_old.csv", header = TRUE)
set.seed(2)
train_i <- sample(1:nrow(data.selected), 2/3*nrow(data.selected))
listings.train.new <- data.selected[train_i, ]
listings.test.new <- data.selected[-train_i, ]
listingsLM.new = lm( formula = price ~ ., data = listings.train.new )
summary(listingsLM.new)
plot(predict(listingsLM.new), residuals(listingsLM.new))
regfit.bwd=regsubsets(price~.,data = data.lm, nvmax = 34, method = "backward")
reg.summary=summary(regfit.bwd)
plot(reg.summary$bic ,xlab="Number of Variables ",ylab="BIC",
type='l')
which.min(reg.summary$bic)
data.selected = read.csv("listings_selected.csv", header = TRUE)
data.selected = read.csv("listings_selected.csv", header = TRUE)
set.seed(2)
train_i <- sample(1:nrow(data.selected), 2/3*nrow(data.selected))
listings.train.new <- data.selected[train_i, ]
listings.test.new <- data.selected[-train_i, ]
listingsLM.new = lm( formula = price ~ ., data = listings.train.new )
summary(listingsLM.new)
pred <- predict(listingsLM.new,data.selected[-train_i, ],type = 'response')
attach(data.selected)
mean((price-predict(listingsLM.new, data.selected))[-train_i]^2)
listingsLM.new2 = lm( formula = price ~ .,
data = listings.train.new )
pred2 <- predict(listingsLM.new2,data.selected[-train_i, ],type = 'response')
attach(data.selected)
mean((price-predict(listingsLM.new2, data.selected))[-train_i]^2)
listings = read.csv("data/listings.csv", header = TRUE)
listings[c("thumbnail_url", "medium_url", "picture_url", "xl_picture_url",
"host_url", "host_thumbnail_url", "host_picture_url", "host_neighbourhood",
"listing_url", "experiences_offered", "id", "scrape_id", "last_scraped", "name", "host_id",
"host_name", "host_since", "host_location", "host_acceptance_rate", "host_verifications",
"host_has_profile_pic", "host_identity_verified", "street", "neighbourhood",
"city", "state", "market", "zipcode", "smart_location", "country_code", "country",
"is_location_exact", "square_feet", "weekly_price", "monthly_price", "maximum_nights",
"calendar_updated", "has_availability", "calendar_last_scraped", "first_review", "last_review",
"requires_license", "jurisdiction_names", "license", "neighbourhood_cleansed")] = NULL
listings$security_deposit = as.numeric(gsub("[\\$,]", "", listings$security_deposit))
listings$price = as.numeric(gsub("[\\$,]", "", listings$price))
listings$cleaning_fee = as.numeric(gsub("[\\$,]", "", listings$cleaning_fee))
listings$extra_people = as.numeric(gsub("[\\$,]", "", listings$extra_people))
listings$host_response_rate = as.numeric(gsub("[,\\%]", "", listings$host_response_rate))
listings$security_deposit[is.na(listings$security_deposit)] = 0
listings$cleaning_fee[is.na(listings$cleaning_fee)] = 0
listings$reviews_per_month[is.na(listings$reviews_per_month)] = 0
listings$bathrooms[is.na(listings$bathrooms)] = 0
listings$bedrooms[is.na(listings$bedrooms)] = 0
listings$beds[is.na(listings$beds)] = 0
listings$review_scores_rating[is.na(listings$review_scores_rating)] = mean(listings$review_scores_rating, na.rm = TRUE)
listings$review_scores_accuracy[is.na(listings$review_scores_accuracy)] = mean(listings$review_scores_accuracy, na.rm = TRUE)
listings$review_scores_cleanliness[is.na(listings$review_scores_cleanliness)] = mean(listings$review_scores_cleanliness, na.rm = TRUE)
listings$review_scores_checkin[is.na(listings$review_scores_checkin)] = mean(listings$review_scores_checkin, na.rm = TRUE)
listings$review_scores_communication[is.na(listings$review_scores_communication)] = mean(listings$review_scores_communication, na.rm = TRUE)
listings$review_scores_location[is.na(listings$review_scores_location)] = mean(listings$review_scores_location, na.rm = TRUE)
listings$review_scores_value[is.na(listings$review_scores_value)] = mean(listings$review_scores_value, na.rm = TRUE)
listings$host_response_rate[is.na(listings$host_response_rate)] = mean(listings$host_response_rate, na.rm = TRUE)
listings$count_summary = sapply(gregexpr("[[:alpha:]]+", listings$summary), function(x) sum(x > 0))
listings$count_summary = listings$count_summary + sapply(gregexpr("[[:digit:]]+\\.*[[:digit:]]*", listings$summary), function(x) sum(x > 0))
listings$count_description = sapply(gregexpr("[[:alpha:]]+", listings$description), function(x) sum(x > 0))
listings$count_description = listings$count_description + sapply(gregexpr("[[:digit:]]+\\.*[[:digit:]]*", listings$description), function(x) sum(x > 0))
listings$count_space = sapply(gregexpr("[[:alpha:]]+", listings$space), function(x) sum(x > 0))
listings$count_space = listings$count_space + sapply(gregexpr("[[:digit:]]+\\.*[[:digit:]]*", listings$space), function(x) sum(x > 0))
listings$count_neighborhood = sapply(gregexpr("[[:alpha:]]+", listings$neighborhood_overview), function(x) sum(x > 0))
listings$count_neighborhood = listings$count_neighborhood + sapply(gregexpr("[[:digit:]]+\\.*[[:digit:]]*", listings$neighborhood_overview), function(x) sum(x > 0))
listings$count_notes = sapply(gregexpr("[[:alpha:]]+", listings$notes), function(x) sum(x > 0))
listings$count_notes = listings$count_notes + sapply(gregexpr("[[:digit:]]+\\.*[[:digit:]]*", listings$notes), function(x) sum(x > 0))
listings$count_transit = sapply(gregexpr("[[:alpha:]]+", listings$transit), function(x) sum(x > 0))
listings$count_transit = listings$count_transit + sapply(gregexpr("[[:digit:]]+\\.*[[:digit:]]*", listings$transit), function(x) sum(x > 0))
listings$count_host = sapply(gregexpr("[[:alpha:]]+", listings$host_about), function(x) sum(x > 0))
listings$count_host = listings$count_host + sapply(gregexpr("[[:digit:]]+\\.*[[:digit:]]*", listings$host_about), function(x) sum(x > 0))
listings$count_amenities = sapply(gregexpr("[^,\\s][^\\,]*[^,\\s]*", listings$amenities), function(x) sum(x > 0))
listings$count_amenities[which(listings$amenities == "{}")] = 0
listings$count_notes[which(is.na(listings$notes))] = 0
listings$count_total = listings$count_summary + listings$count_description + listings$count_space +
listings$count_neighborhood + listings$count_notes + listings$count_transit + listings$count_host
listings[c("summary", "description", "space", "amenities", "neighborhood_overview",
"notes", "transit", "host_about")] = NULL
unique (unlist(lapply (listings, function (x) which (is.na (x)))))
new_listings = listings
new_listings[c("count_notes","count_description","count_space","count_transit",
"count_host","count_neighborhood","host_listings_count"
,"count_summary","count_amenities")] = NULL
data.lm = new_listings
set.seed(2)
train_ind <- sample(1:nrow(data.lm), 2/3*nrow(data.lm))
listings.train <- data.lm[train_ind, ]
listings.test <- data.lm[-train_ind, ]
listingsLM = lm( formula = price ~ ., data = listings.train )
pred <- predict(listingsLM,data.lm[-train_ind, ],type = 'response')
attach(data.selected)
mean((price-predict(listingsLM.new, data.selected))[-train_i]^2)
attach(data.lm)
mean((price-predict(listingsLM, data.lm))[-train_ind]^2)
set.seed(2)
train_ind <- sample(1:nrow(data.lm), 2/3*nrow(data.lm))
listings.train <- data.lm[train_ind, ]
listings.test <- data.lm[-train_ind, ]
listingsLM = lm( formula = price ~ ., data = listings.train )
summary(listingsLM)
